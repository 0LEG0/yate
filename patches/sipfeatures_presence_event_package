Description: Added "presence" event package support (composing only)
Author: vir@ctm.ru
---
Index: yate/modules/server/sipfeatures.cpp
===================================================================
--- yate.orig/modules/server/sipfeatures.cpp	2016-01-14 16:34:53.000000000 +0300
+++ yate/modules/server/sipfeatures.cpp	2016-01-15 14:59:27.000000000 +0300
@@ -27,6 +27,44 @@
 using namespace TelEngine;
 namespace { // anonymous
 
+// Random string generator
+class IdGenerator: public Mutex
+{
+public:
+    static IdGenerator& Instance()
+    {
+	static IdGenerator inst;
+	return inst;
+    }
+    String NextVal()
+    {
+	Lock lock(this);
+	for(char * t = m_buf; *t; ++t)
+	{
+	    ++*t;
+	    if(*t <= 'z')
+		break;
+	    *t = 'a';
+	}
+	return m_buf;
+    }
+private:
+    IdGenerator(const IdGenerator&);
+    IdGenerator(size_t len = 10)
+	: Mutex(false, "sipfeatures message id generator")
+    {
+	m_buf = (char*)malloc(len);
+	for(size_t i = 0; i < len - 1; ++i)
+	    m_buf[i] = 'a';
+	m_buf[len - 1] = '\0';
+    }
+    ~IdGenerator()
+    {
+	free(m_buf);
+    }
+    char * m_buf;
+};
+
 // Features module
 class YSipFeatures : public Module
 {
@@ -34,11 +72,13 @@
     enum Event {
 	Dialog  = 0,                     // dialog
 	MWI     = 1,                     // message-sumary
+	Presence = 2,                    // presence
     };
 
     enum Content {
 	AppDlgInfoXml,                   // application/dialog-info+xml
 	AppSimpleMsgSummary,             // application/simple-message-summary
+	AppPidfXml,                      // application/pidf+xml
     };
 
     YSipFeatures();
@@ -64,7 +104,7 @@
 #define EXPIRES_DEF 600
 #define EXPIRES_MAX 3600
 
-#define KNOWN_EVENTS 2
+#define KNOWN_EVENTS 3
 
 static bool s_verboseXml = true;        // Build verbose XML body (add line breaks and spaces)
 static YSipFeatures s_module;
@@ -74,6 +114,7 @@
 static TokenDict s_events[KNOWN_EVENTS+1] = {
 	{"dialog",          YSipFeatures::Dialog},
 	{"message-summary", YSipFeatures::MWI},
+	{"presence",        YSipFeatures::Presence},
 	{0,0}
 	};
 
@@ -81,6 +122,7 @@
 static TokenDict s_contents[] = {
 	{"application/dialog-info+xml",        YSipFeatures::AppDlgInfoXml},
 	{"application/simple-message-summary", YSipFeatures::AppSimpleMsgSummary},
+	{"application/pidf+xml",               YSipFeatures::AppPidfXml},
 	{0,0}
 	};
 
@@ -110,6 +152,8 @@
     void createDialogBody(String& dest, const Message& src, const String& entity);
     // Create the body for 'message-summary' event notification
     void createMWIBody(String& dest, const Message& src);
+    // Create the body for 'presence' event notification
+    void createPresenceBody(String& body, const Message& src, const String& entity);
 };
 
 
@@ -260,6 +304,9 @@
 	case YSipFeatures::MWI:
 	    defType = YSipFeatures::AppSimpleMsgSummary;  // RFC3842
 	    break;
+	case YSipFeatures::Presence:
+	    defType = YSipFeatures::AppPidfXml;           // RFC3863
+	    break;
     }
     content = lookup(defType,s_contents);
     // Check if an Accept header is present: if so, it MUST contain the content
@@ -327,6 +374,10 @@
 //   Optional integer specifying the number of unread (new) voice messages
 // message-summary.voiceold
 //   Optional integer specifying the number of read (old) voice messages
+// presence.open
+// presence.im
+// presence.contact
+// presence.timestamp
 bool YSipNotifyHandler::received(Message &msg)
 {
     String notifyto = msg.getValue("notifyto");
@@ -382,6 +433,13 @@
 	case YSipFeatures::MWI:
 	    createMWIBody(body,msg);
 	    break;
+	case YSipFeatures::Presence: {
+		URI uri(m.getValue("sip_From"));
+		String entity;
+		entity << "sip:" << uri.getUser() << "@" << uri.getHost();
+		createPresenceBody(body,msg,entity);
+	    }
+	    break;
 	default:
 	    Debug(&s_module,DebugNote,"NOTIFY. Invalid event='%s'",
 		event?event->c_str():"");
@@ -519,6 +577,54 @@
 	dest << "no\r\n";
 }
 
+// Create the body for 'presence' event notification
+void YSipNotifyHandler::createPresenceBody(String& body, const Message& src, const String& entity)
+{
+    bool is_open = src.getBoolValue("presence.open", false);
+    bool has_imstatus = 0 <= src.getIndex("imstatus");
+    body = "";
+    body << "<?xml version=\"1.0\"?>";
+    XmlElement* xml = new XmlElement("presence");
+    xml->setXmlns(String::empty(),true,"urn:ietf:params:xml:ns:pidf");
+    if(has_imstatus)
+	xml->setXmlns("im",true,"urn:ietf:params:xml:ns:pidf:im");
+    xml->setAttributeValid("entity",entity);
+
+    String tuple_id = IdGenerator::Instance().NextVal();
+    XmlElement* tuple = new XmlElement("tuple");
+    tuple->setAttributeValid("id",tuple_id);
+
+    XmlElement* status = new XmlElement("status");
+    XmlElement* basic = new XmlElement("basic");
+    basic->addText(is_open ? "open" : "closed");
+    status->addChild(basic);
+    tuple->addChild(status);
+    xml->addChild(tuple);
+
+    if(has_imstatus) {
+	XmlElement* im = new XmlElement("im:im");
+	im->addText(src.getValue("presence.im"));
+	status->addChild(im);
+    }
+    if(0 >= src.getIndex("contact")) {
+	XmlElement* c = new XmlElement("contact");
+	c->addText(src.getValue("presence.contact"));
+	tuple->addChild(c);
+    }
+    if(0 >= src.getIndex("timestamp")) {
+	XmlElement* ts = new XmlElement("timestamp");
+	ts->addText(src.getValue("presence.timestamp"));
+	tuple->addChild(ts);
+    }
+
+    if (s_verboseXml)
+	xml->toString(body,true,"\r\n","  ");
+    else
+	xml->toString(body);
+    body << "\r\n";
+    TelEngine::destruct(xml);
+}
+
 
 /**
  * YSipFeatures
